# Unified Docker Compose for NeoV3
# - Base architecture from enhanced-ai-agent-os
# - Adds API service from root /api
# - Uses paths under enhanced-ai-agent-os/ for infrastructure, data, and logs

services:
  # ================================================================================
  # PRIMARY DATABASE - PostgreSQL with pgvector
  # ================================================================================
  postgres:
    image: pgvector/pgvector:pg15
    container_name: enhanced-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-enhanced_ai_os}
      POSTGRES_USER: ${POSTGRES_USER:-ai_agent_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d:ro
      - postgres_backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_agent_user} -d ${POSTGRES_DB:-enhanced_ai_os}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - enhanced-ai-network
      - agentnet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================================================================
  # CONSCIOUSNESS SUBSTRATE - Neo4j Graph Database
  # ================================================================================
  neo4j:
    image: neo4j:5.15-community
    container_name: enhanced-ai-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
      NEO4J_PLUGINS: ${NEO4J_PLUGINS:-[]}
      NEO4J_server_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL_SIZE:-256m}
      NEO4J_server_memory_heap_max__size: ${NEO4J_HEAP_MAX_SIZE:-512m}
      NEO4J_server_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-256m}
      NEO4J_server_query_cache_size: ${NEO4J_QUERY_CACHE_SIZE:-10M}
      NEO4J_server_jvm_additional: ${NEO4J_JVM_ADDITIONAL:--XX:+UseG1GC -XX:+UnlockExperimentalVMOptions}
      NEO4J_server_bolt_listen__address: 0.0.0.0:7687
      NEO4J_server_http_listen__address: 0.0.0.0:7474
      NEO4J_server_logs_debug_level: INFO
      NEO4J_server_logs_query_enabled: true


  # ================================================================================
  # ORCHESTRATION PLATFORM - n8n with Built-in AI Capabilities
  # ================================================================================
  n8n:
    image: n8nio/n8n:1.64.0
    container_name: enhanced-ai-n8n
    restart: unless-stopped
    env_file:
      - .env
    environment:
      N8N_HOST: ${N8N_HOST:-0.0.0.0}
      N8N_PORT: ${N8N_PORT:-5678}
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_SECURE_COOKIE: ${N8N_SECURE_COOKIE:-false}
      DB_TYPE: ${N8N_DB_TYPE:-postgresdb}
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-enhanced_ai_os}
      DB_POSTGRESDB_HOST: ${POSTGRES_HOST:-postgres}
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT:-5432}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-ai_agent_user}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: ${N8N_DB_POSTGRESDB_SCHEMA:-n8n}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678}
      N8N_EDITOR_BASE_URL: ${WEBHOOK_URL:-http://localhost:5678}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-UTC}
      N8N_METRICS: ${N8N_METRICS:-true}
      N8N_DIAGNOSTICS_ENABLED: ${N8N_DIAGNOSTICS_ENABLED:-false}
      N8N_LOG_OUTPUT: ${N8N_LOG_OUTPUT:-console,file}
      N8N_LOG_FILE_COUNT_MAX: ${N8N_LOG_FILE_COUNT_MAX:-100}
      N8N_LOG_FILE_SIZE_MAX: ${N8N_LOG_FILE_SIZE_MAX:-16777216}
      N8N_EXECUTIONS_PROCESS: ${N8N_EXECUTIONS_PROCESS:-main}
      N8N_EXECUTIONS_TIMEOUT: ${N8N_EXECUTIONS_TIMEOUT:-3600}
      N8N_EXECUTIONS_TIMEOUT_MAX: ${N8N_EXECUTIONS_TIMEOUT_MAX:-7200}
      N8N_EXECUTIONS_DATA_SAVE_ON_ERROR: ${N8N_EXECUTIONS_DATA_SAVE_ON_ERROR:-all}
      N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS: ${N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS:-all}
      N8N_EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: ${N8N_EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS:-true}
      N8N_EXECUTIONS_DATA_PRUNE: ${N8N_EXECUTIONS_DATA_PRUNE:-true}
      N8N_EXECUTIONS_DATA_MAX_AGE: ${N8N_EXECUTIONS_DATA_MAX_AGE:-336}
      N8N_AI_ENABLED: ${N8N_AI_ENABLED:-true}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE:-https://api.openai.com/v1}
      OPENAI_ORGANIZATION: ${OPENAI_ORGANIZATION}
      OPENAI_PROJECT: ${OPENAI_PROJECT}
      OPENROUTER_BASE_URL: ${OPENROUTER_BASE_URL:-https://openrouter.ai/api/v1}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-true}
      LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}
      LANGCHAIN_SESSION: ${LANGCHAIN_SESSION}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_SERVICE_NAME: n8n
      PUSHGATEWAY_URL: http://pushgateway:9091
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-ai_agent_queue_user}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    volumes:
      - n8n_data:/home/node/.n8n
      - ./infrastructure/n8n/config/settings.json:/home/node/.n8n/settings.json:ro
      - ./workflows:/home/node/.n8n/workflows
      - n8n_logs:/home/node/.n8n/logs
      - n8n_backups:/backups
    ports:
      - "${N8N_PORT:-5678}:5678"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

