{
  "name": "Research Agent",
  "nodes": [
    {
      "parameters": {"path": "research/query", "responseCode": 200, "options": {"responseHeaders": {"entries": [{"name": "Content-Type", "value": "application/json"}]}}},
      "id": "Webhook",
      "name": "Webhook Research Query",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "functionCode": "const b=$json||{};\nconst query=b.query||b.q;\nif(!query) throw new Error('query is required');\nconst sessionId=b.sessionId||b.session_id||null;\nconst userId=b.userId||b.user_id||null;\nconst timeframe=b.timeframe||'2y';\nconst maxResults=Math.max(1, Math.min(10, Number(b.maxResults||6)));\nreturn [{ json: { query, timeframe, maxResults, sessionId, userId } }];"
      },
      "id": "Normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "url": "={{$json.toolsBase || $env.N8N_BASE_URL || 'http://localhost:5678'}}/webhook/research/tools/web-search",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { query: $json.query, limit: $json.maxResults } }}"
      },
      "id": "WebSearch",
      "name": "Web Search (Google + Bing)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [720, 120]
    },
    {
      "parameters": {
        "url": "={{$json.toolsBase || $env.N8N_BASE_URL || 'http://localhost:5678'}}/webhook/research/tools/academic-search",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { query: $json.query, limit: $json.maxResults } }}"
      },
      "id": "AcademicSearch",
      "name": "Academic Search (Semantic Scholar)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [720, 280]
    },
    {
      "parameters": {
        "functionCode": "// Combine general and academic search results into unified list\nconst all=[];\nfor (const it of items){ const j=it.json||{}; if (Array.isArray(j.results)) { for (const r of j.results) all.push(r); } }\nreturn [{ json: { results: all, query: $json.query, maxResults: $json.maxResults, sessionId: $json.sessionId, userId: $json.userId } }];"
      },
      "id": "CombineSearch",
      "name": "Combine Search Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [860, 200]
    },
    {
      "parameters": {
        "functionCode": "// collect URLs from combined search results\nconst results = $json.results || [];\nconst urls = results.map(r=>r.url).filter(Boolean).slice(0, $json.maxResults);\nreturn [{ json: { query: $json.query, results, urls, maxResults: $json.maxResults, sessionId: $json.sessionId, userId: $json.userId } }];"
      },
      "id": "CollectURLs",
      "name": "Collect URLs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "url": "={{$json.toolsBase || $env.N8N_BASE_URL || 'http://localhost:5678'}}/webhook/research/tools/content-analysis",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { urls: $json.urls, limit: $json.maxResults } }}"
      },
      "id": "AnalyzeContent",
      "name": "Content Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1380, 200]
    },
    {
      "parameters": {
        "functionCode": "// Merge search metadata with analyses by URL\nconst search = $json.results || [];\nconst analyses = items.map(i=>i.json).filter(j=>j && j.analysis);\nconst byUrl = new Map(analyses.map(a=>[a.url, a.analysis]));\nconst merged = [];\nfor (const s of search) {\n  const a = byUrl.get(s.url);\n  if (a) merged.push({ title: s.title, url: s.url, source: s.source, snippet: s.snippet, analysis: a });\n}\nreturn [{ json: { query: $json.query, documents: merged, sessionId: $json.sessionId, userId: $json.userId } }];"
      },
      "id": "Merge",
      "name": "Merge Results + Analyses",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1640, 200]
    },
    {
      "parameters": {
        "functionCode": "// Simple credibility scoring: domain heuristic + sentiment neutrality + presence of entities\nfunction domainScore(u){ try{const h=new URL(u).hostname; if(/(gov|edu)$/.test(h)) return 0.95; if(/(ieee|acm|nature|science|arxiv|springer|wiley)/i.test(h)) return 0.9; if(/(wikipedia|medium|substack)/i.test(h)) return 0.6; return 0.7;}catch(e){return 0.5;} }\nconst docs = $json.documents||[];\nfor (const d of docs){ const a=d.analysis||{}; const base=domainScore(d.url); const sentiment=a.sentiment==='neutral'?0.05:0; const entities=(Array.isArray(a.entities)&&a.entities.length>2)?0.05:0; d.credibility = Math.min(1, +(base+sentiment+entities).toFixed(2)); }\nreturn [{ json: { query: $json.query, documents: docs, sessionId: $json.sessionId, userId: $json.userId } }];"
      },
      "id": "Score",
      "name": "Credibility Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1900, 200]
    },
    {
      "parameters": {
        "promptType": "chat",
        "provider": "openai",
        "model": "gpt-4",
        "systemMessage": "You are the Research Agent. Using provided documents (title,url,snippet,analysis{summary,key_insights,sentiment,entities,quality_notes} and credibility), produce a comprehensive research report. Methodology: multi-source verification, bias detection, temporal relevance, authority evaluation. Output strict JSON with: executive_summary (string), key_findings (array of strings), comparative_analysis (array), risks_biases_limitations (array), recommendations (array), citations (array of {title,url,source,accessed_at,format}), confidence (0-1), next_steps (array). Always include citations for each finding.",
        "inputKey": "={{$json}}",
        "toolsAgent": true,
        "tooling": {"allowHttp": true, "allowCode": false},
        "temperature": 0.2,
        "maxTokens": 1200
      },
      "id": "Synthesize",
      "name": "AI Synthesize Report (Tools)",
      "type": "n8n-nodes-base.aiAgent",
      "typeVersion": 1,
      "position": [2160, 200]
    },
    {
      "parameters": {
        "functionCode": "// Shape output, ensure citations present\nconst out = items[0].json;\nconst now=new Date().toISOString();\nif (out && out.citations) { for (const c of out.citations) { if (!c.accessed_at) c.accessed_at = now; if (!c.format) c.format = `${c.title}. Retrieved ${now} from ${c.url}`; } }\nreturn [{ json: { report: out, sessionId: $json.sessionId, userId: $json.userId } }];"
      },
      "id": "Shape",
      "name": "Shape Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2420, 200]
    },
    {
      "parameters": {
        "database": "neo4j",
        "query": "={{`MERGE (r:ResearchReport {id: coalesce('${$json.sessionId}','temp') + '-' + toString(timestamp())}) SET r.query='${($json.report?.executive_summary||'').replace(/'/g, \"''\")}', r.createdAt=datetime(), r.confidence=${Number($json.report?.confidence||0)}, r.summary='${($json.report?.executive_summary||'').replace(/'/g, \"''\")}' WITH r UNWIND ${JSON.stringify($json.report?.citations||[])} AS c MERGE (s:Source {url: c.url}) SET s.title = c.title, s.source = c.source MERGE (r)-[:CITES]->(s) RETURN r`}}",
        "options": {"queryType": "cypher"}
      },
      "id": "Neo4j_Update",
      "name": "Neo4j Knowledge Update",
      "type": "n8n-nodes-base.neo4j",
      "typeVersion": 1,
      "position": [2680, 280]
    },
    {
      "parameters": {"functionCode": "return [{ json: { status: 'ok', report: $json.report } }];"},
      "id": "Respond",
      "name": "Respond",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2680, 40]
    }
  ],
  "connections": {
    "Webhook Research Query": {"main": [[{"node": "Normalize Input", "type": "main", "index": 0}]]},
    "Normalize Input": {"main": [[{"node": "Web Search (Google + Bing)", "type": "main", "index": 0}], [{"node": "Academic Search (Semantic Scholar)", "type": "main", "index": 0}]]},
    "Web Search (Google + Bing)": {"main": [[{"node": "Combine Search Results", "type": "main", "index": 0}]]},
    "Academic Search (Semantic Scholar)": {"main": [[{"node": "Combine Search Results", "type": "main", "index": 0}]]},
    "Combine Search Results": {"main": [[{"node": "Collect URLs", "type": "main", "index": 0}]]},
    "Collect URLs": {"main": [[{"node": "Content Analysis", "type": "main", "index": 0}]]},
    "Content Analysis": {"main": [[{"node": "Merge Results + Analyses", "type": "main", "index": 0}]]},
    "Merge Results + Analyses": {"main": [[{"node": "Credibility Scoring", "type": "main", "index": 0}]]},
    "Credibility Scoring": {"main": [[{"node": "AI Synthesize Report (Tools)", "type": "main", "index": 0}]]},
    "AI Synthesize Report (Tools)": {"main": [[{"node": "Shape Report", "type": "main", "index": 0}]]},
    "Shape Report": {"main": [[{"node": "Respond", "type": "main", "index": 0}], [{"node": "Neo4j Knowledge Update", "type": "main", "index": 0}]]}
  },
  "settings": {"executionOrder": "v1"},
  "tags": ["research", "agent"],
  "versionId": "research-agent-v1"
}
