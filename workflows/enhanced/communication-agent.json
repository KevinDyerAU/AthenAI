{
  "name": "Communication Agent",
  "nodes": [
    {
      "parameters": {"path": "communication/run", "responseCode": 200, "options": {"responseHeaders": {"entries": [{"name": "Content-Type", "value": "application/json"}]}}},
      "id": "Webhook",
      "name": "Webhook Communication Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "functionCode": "const b=$json||{};\nconst message=b.message||b.content||'';\nif(!message) throw new Error('message/content is required');\nconst audience=b.audience||{segments:['general']};\nconst channels=Array.isArray(b.channels)?b.channels:['email','sms','social'];\nconst schedule=b.schedule||{when:'now'};\nconst metadata=b.metadata||{};\nconst compliance=b.compliance||{consent:true, unsubscribe:true};\nreturn [{ json: { message, audience, channels, schedule, metadata, compliance, options:b.options||{} } }];"
      },
      "id": "Normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "functionCode": "// Simple routing decision: urgency & preferences -> channel order\nconst msg=$json.message; const ch=$json.channels||[]; const prefs=($json.metadata&&$json.metadata.preferences)||{};\nlet order=[...ch]; if(prefs.preferred){ order=order.sort((a,b)=> (a===prefs.preferred?-1:0) - (b===prefs.preferred?-1:0)); }\nreturn [{ json: { ...$json, routing: { order } } }];"
      },
      "id": "Routing",
      "name": "Message Routing",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [720, 120]
    },
    {
      "parameters": {
        "url": "={{$json.toolsBase || $env.N8N_BASE_URL || 'http://localhost:5678'}}/webhook/communication/tools/email-delivery",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { message: $json.message, audience: $json.audience, schedule: $json.schedule, compliance: $json.compliance, metadata: $json.metadata } }}"
      },
      "id": "Email",
      "name": "Email Delivery",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [720, 280]
    },
    {
      "parameters": {
        "url": "={{$json.toolsBase || $env.N8N_BASE_URL || 'http://localhost:5678'}}/webhook/communication/tools/social-media",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { message: $json.message, audience: $json.audience, schedule: $json.schedule, metadata: $json.metadata } }}"
      },
      "id": "Social",
      "name": "Social Media",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [980, 200]
    },
    {
      "parameters": {
        "promptType": "chat",
        "provider": "openai",
        "model": "gpt-4",
        "systemMessage": "You are the Communication Agent. Use the Think Tool to analyze communication requirements and develop optimal strategies. Using message, routing, email and social specs, produce a communication execution plan with personalization, scheduling, and compliance checks. Include analytics KPIs and follow-up logic. Output strict JSON with: composed_messages (by channel), personalization_rules, schedule, ab_tests, compliance, delivery_plan, analytics (events, metrics), response_handling, risks, next_steps.",
        "inputKey": "={{$json}}",
        "tools": [
          {
            "name": "toolThink",
            "description": "Think through communication strategy and optimization"
          }
        ],
        "toolsAgent": true,
        "tooling": {"allowHttp": true, "allowCode": false},
        "temperature": 0.2,
        "maxTokens": 1000
      },
      "id": "Synthesize",
      "name": "AI Synthesize Comm Plan",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [1240, 200]
    },
    {
      "parameters": {"functionCode": "return [{ json: { status: 'ok', plan: items[0].json, email: $json.email, social: $json.social, routing: $json.routing } }];"},
      "id": "Respond",
      "name": "Respond",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1500, 200]
    }
  ],
  "connections": {
    "Webhook Communication Input": {"main": [[{"node": "Normalize Input", "type": "main", "index": 0}]]},
    "Normalize Input": {"main": [[{"node": "Message Routing", "type": "main", "index": 0}], [{"node": "Email Delivery", "type": "main", "index": 0}], [{"node": "Social Media", "type": "main", "index": 0}]]},
    "Message Routing": {"main": [[{"node": "AI Synthesize Comm Plan", "type": "main", "index": 0}]]},
    "Email Delivery": {"main": [[{"node": "AI Synthesize Comm Plan", "type": "main", "index": 0}]]},
    "Social Media": {"main": [[{"node": "AI Synthesize Comm Plan", "type": "main", "index": 0}]]},
    "AI Synthesize Comm Plan": {"main": [[{"node": "Respond", "type": "main", "index": 0}]]}
  },
  "settings": {"executionOrder": "v1"},
  "tags": ["communication", "agent"],
  "versionId": "communication-agent-v1"
}
