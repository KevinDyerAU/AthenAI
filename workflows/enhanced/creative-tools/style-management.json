{
  "name": "Creative Tool â€” Style Management",
  "nodes": [
    {"parameters": {"path": "creative/tools/style-management", "responseCode": 200}, "id": "Webhook", "name": "Webhook", "type": "n8n-nodes-base.webhook", "typeVersion": 1, "position": [200, 200]},

    {"parameters": {"functionCode": "const b=$json||{};const action=(b.action||'evaluate').toLowerCase();const content=b.content||'';const guidelines=b.guidelines||b.style||{};const profile=b.profile||{};const meta=b.meta||{};const id=profile.id||b.id||null;const name=profile.name||b.name||null;const limit=Math.max(1,Math.min(100, Number(b.limit||20)));const offset=Math.max(0, Number(b.offset||0));if(action==='evaluate'&&!content)throw new Error('content required');return [{json:{action,content,guidelines,profile:{id,name,guidelines},meta,limit,offset}}];"}, "id": "Normalize", "name": "Normalize", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [460, 200]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "evaluate"}]}}, "id": "IfEval", "name": "If Evaluate", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 160]},

    {"parameters": {"promptType": "chat", "provider": "openai", "model": "gpt-4", "systemMessage": "You are a brand/style compliance evaluator. Use the Think Tool to systematically analyze content adherence to guidelines. Score adherence to provided guidelines: tone, terminology, claims, visual guidance (if applicable), inclusivity, legal/compliance. Return strict JSON: {score:0-1, findings:[...], violations:[...], suggestions:[...], risk_level:'low|medium|high'}.", "inputKey": "={{$json}}", "tools": [{"name": "toolThink", "description": "Think through style compliance analysis systematically"}], "toolsAgent": true, "temperature": 0.2, "maxTokens": 800}, "id": "Evaluate", "name": "AI Evaluate Style", "type": "@n8n/n8n-nodes-langchain.agent", "typeVersion": 1, "position": [980, 120]},

    {"parameters": {"functionCode": "return [{json:{status:'ok', result: items[0].json}}];"}, "id": "RespondEval", "name": "Respond Eval", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [1240, 120]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "profile_create"}]}}, "id": "IfCreate", "name": "If Create", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 280]},

    {"parameters": {"functionCode": "// build insert SQL\\nfunction v4(){return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,c=>{const r=Math.random()*16|0,v=c==='x'?r:(r&0x3|0x8);return v.toString(16);});}\\nconst p=$json.profile||{};const id=p.id||v4();const name=p.name||'default';const g=JSON.stringify(p.guidelines||$json.guidelines||{}).replace(/'/g,\\\"''\\\");\\nconst sql=`INSERT INTO brand_profiles (id,name,guidelines) VALUES ('${id}','${name}','${g}'::jsonb) RETURNING *;`;\\nreturn [{json:{sql}}];"}, "id": "SQLCreate", "name": "SQL Create", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [980, 260]},
    {"parameters": {"database": "postgres", "query": "={{$json.sql}}", "options": {"queryParams": []}}, "id": "PGCreate", "name": "Postgres Create", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [1240, 260]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "profile_update"}]}}, "id": "IfUpdate", "name": "If Update", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 360]},
    {"parameters": {"functionCode": "const p=$json.profile||{};const id=p.id||$json.id||null;const name=p.name||null;const g=JSON.stringify(p.guidelines||$json.guidelines||{}).replace(/'/g,\\\"''\\\");\\nif(!id && !name) throw new Error('id or name required for update');\\nconst where = id?`id='${id}'`:`name='${name?name.replace(/'/g,\\\"''\\\"):''}'`;\\nconst sql=`UPDATE brand_profiles SET guidelines='${g}'::jsonb, updated_at=now() WHERE ${where} RETURNING *;`;\\nreturn [{json:{sql}}];"}, "id": "SQLUpdate", "name": "SQL Update", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [980, 340]},
    {"parameters": {"database": "postgres", "query": "={{$json.sql}}", "options": {"queryParams": []}}, "id": "PGUpdate", "name": "Postgres Update", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [1240, 340]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "profile_get"}]}}, "id": "IfGet", "name": "If Get", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 440]},
    {"parameters": {"functionCode": "const p=$json.profile||{};const id=p.id||$json.id||null;const name=p.name||null; if(!id && !name) throw new Error('id or name required for get'); const where = id?`id='${id}'`:`name='${name?name.replace(/'/g,\\\"''\\\"):''}'`; const sql=`SELECT * FROM brand_profiles WHERE ${where} LIMIT 1;`; return [{json:{sql}}];"}, "id": "SQLGet", "name": "SQL Get", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [980, 420]},
    {"parameters": {"database": "postgres", "query": "={{$json.sql}}", "options": {"queryParams": []}}, "id": "PGGet", "name": "Postgres Get", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [1240, 420]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "profile_delete"}]}}, "id": "IfDelete", "name": "If Delete", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 520]},
    {"parameters": {"functionCode": "const p=$json.profile||{};const id=p.id||$json.id||null;const name=p.name||null; if(!id && !name) throw new Error('id or name required for delete'); const where = id?`id='${id}'`:`name='${name?name.replace(/'/g,\\\"''\\\"):''}'`; const sql=`DELETE FROM brand_profiles WHERE ${where} RETURNING *;`; return [{json:{sql}}];"}, "id": "SQLDelete", "name": "SQL Delete", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [980, 500]},
    {"parameters": {"database": "postgres", "query": "={{$json.sql}}", "options": {"queryParams": []}}, "id": "PGDelete", "name": "Postgres Delete", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [1240, 500]},

    {"parameters": {"conditions": {"string": [{"value1": "={{$json.action}}", "operation": "equal", "value2": "profile_list"}]}}, "id": "IfList", "name": "If List", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [720, 600]},
    {"parameters": {"functionCode": "const limit=Number($json.limit||20);const offset=Number($json.offset||0);const sql=`SELECT * FROM brand_profiles ORDER BY updated_at DESC LIMIT ${limit} OFFSET ${offset};`;return [{json:{sql}}];"}, "id": "SQLList", "name": "SQL List", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [980, 580]},
    {"parameters": {"database": "postgres", "query": "={{$json.sql}}", "options": {"queryParams": []}}, "id": "PGList", "name": "Postgres List", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [1240, 580]},

    {"parameters": {"functionCode": "return [{json:{status:'ok', result: items[0].json}}];"}, "id": "RespondProfile", "name": "Respond Profile", "type": "n8n-nodes-base.function", "typeVersion": 1, "position": [1500, 420]}
  ],
  "connections": {
    "Webhook": {"main": [[{"node": "Normalize", "type": "main", "index": 0}]]},
    "Normalize": {"main": [[{"node": "If Evaluate", "type": "main", "index": 0}]]},
    "If Evaluate": {"main": [[{"node": "AI Evaluate Style", "type": "main", "index": 0}], [{"node": "If Create", "type": "main", "index": 0}]]},
    "AI Evaluate Style": {"main": [[{"node": "Respond Eval", "type": "main", "index": 0}]]},
    "If Create": {"main": [[{"node": "SQL Create", "type": "main", "index": 0}], [{"node": "If Update", "type": "main", "index": 0}]]},
    "SQL Create": {"main": [[{"node": "Postgres Create", "type": "main", "index": 0}]]},
    "Postgres Create": {"main": [[{"node": "Respond Profile", "type": "main", "index": 0}]]},
    "If Update": {"main": [[{"node": "SQL Update", "type": "main", "index": 0}], [{"node": "If Get", "type": "main", "index": 0}]]},
    "SQL Update": {"main": [[{"node": "Postgres Update", "type": "main", "index": 0}]]},
    "Postgres Update": {"main": [[{"node": "Respond Profile", "type": "main", "index": 0}]]},
    "If Get": {"main": [[{"node": "SQL Get", "type": "main", "index": 0}], [{"node": "If Delete", "type": "main", "index": 0}]]},
    "SQL Get": {"main": [[{"node": "Postgres Get", "type": "main", "index": 0}]]},
    "Postgres Get": {"main": [[{"node": "Respond Profile", "type": "main", "index": 0}]]},
    "If Delete": {"main": [[{"node": "SQL Delete", "type": "main", "index": 0}], [{"node": "If List", "type": "main", "index": 0}]]},
    "SQL Delete": {"main": [[{"node": "Postgres Delete", "type": "main", "index": 0}]]},
    "Postgres Delete": {"main": [[{"node": "Respond Profile", "type": "main", "index": 0}]]},
    "If List": {"main": [[{"node": "SQL List", "type": "main", "index": 0}], []]},
    "SQL List": {"main": [[{"node": "Postgres List", "type": "main", "index": 0}]]},
    "Postgres List": {"main": [[{"node": "Respond Profile", "type": "main", "index": 0}]]}
  },
  "settings": {"executionOrder": "v1"},
  "tags": ["creative", "style"],
  "versionId": "creative-style-management-v1"
}
