{
  "name": "Master Orchestration Agent (Tools Agent)",
  "nodes": [
    {
      "parameters": {
        "path": "master/orchestrate",
        "responseCode": 200,
        "options": {
          "responseHeaders": {"entries": [{"name": "Content-Type", "value": "application/json"}]}
        }
      },
      "id": "Webhook_Master",
      "name": "Webhook Master Orchestrate",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 260]
    },
    {
      "parameters": {
        "promptType": "chat",
        "provider": "openai",
        "model": "gpt-4",
        "systemMessage": "You are the Master Orchestration Agent for the Enhanced AI Agent OS. Use the Think Tool to systematically analyze user requests and plan optimal delegation strategies. Your role is to: 1) analyze user requests, 2) determine task complexity, 3) choose agent delegation strategy (research, creative, analysis, development, etc.), 4) create a step-by-step plan, 5) publish messages to RabbitMQ for agent execution, 6) persist and retrieve relevant context from the Neo4j consciousness substrate, 7) maintain conversation memory across interactions, 8) emit performance metrics metadata. Constraints: Always return a JSON object with keys: plan (array of steps), primary_agent, collaborators (array), queue (string), neo4j_context (object with write:Boolean and cypher:String), memory (object with upsert:Boolean and keys:Array), and metadata (object).",
        "inputKey": "={{$json}}",
        "tools": [
          {
            "name": "toolThink",
            "description": "Think through orchestration strategy and task delegation decisions"
          }
        ],
        "toolsAgent": true,
        "tooling": {
          "allowHttp": true,
          "allowCode": false
        },
        "temperature": 0.2,
        "maxTokens": 800
      },
      "id": "AI_Agent",
      "name": "AI Agent (Tools with Think Tool)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [520, 260]
    },
    {
      "parameters": {
        "functionCode": "// Validate and shape LLM output\nconst o = items[0].json;\nif (!o.plan || !o.queue) { throw new Error('Invalid orchestration plan from AI Agent'); }\nreturn [{ json: {\n  plan: o.plan,\n  primary_agent: o.primary_agent,\n  collaborators: o.collaborators || [],\n  queue: o.queue,\n  neo4j_context: o.neo4j_context || {},\n  memory: o.memory || {},\n  metadata: o.metadata || {},\n  request: $json\n}}];"
      },
      "id": "Validate_Plan",
      "name": "Validate Orchestration Plan",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 260]
    },
    {
      "parameters": {
        "operation": "publish",
        "queue": "={{$json.queue}}",
        "message": "={{ JSON.stringify({ type: 'orchestration', plan: $json.plan, primary_agent: $json.primary_agent, collaborators: $json.collaborators, request: $json.request }) }}",
        "options": {
          "persistent": true,
          "contentType": "application/json"
        }
      },
      "id": "RabbitMQ_Publish",
      "name": "Publish → RabbitMQ",
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1,
      "position": [1080, 160]
    },
    {
      "parameters": {
        "database": "neo4j",
        "query": "={{ $json.neo4j_context && $json.neo4j_context.write ? ($json.neo4j_context.cypher || 'RETURN 1') : 'RETURN 1' }}",
        "options": {
          "queryType": "cypher"
        }
      },
      "id": "Neo4j_Write",
      "name": "Neo4j Context Write",
      "type": "n8n-nodes-base.neo4j",
      "typeVersion": 1,
      "position": [1080, 360]
    },
    {
      "parameters": {
        "functionCode": "// Build UPSERT SQL for conversation memory (Postgres)\nconst reqCtx = $json.request?.context || {};\nconst m = $json.memory || {};\nconst sessionId = reqCtx.sessionId || reqCtx.session_id || 'unknown-session';\nconst userId = reqCtx.userId || reqCtx.user_id || null;\nconst keys = JSON.stringify(m.keys || []);\nconst context = JSON.stringify(reqCtx);\n\nfunction sqlEscape(str){ return String(str).replace(/'/g, \"''\"); }\n\nconst q = `INSERT INTO conversations_memory (session_id, user_id, keys, context, updated_at)\nVALUES ('${sqlEscape(sessionId)}', ${userId?\"'${sqlEscape(userId)}'\":'NULL'}, '${sqlEscape(keys)}'::jsonb, '${sqlEscape(context)}'::jsonb, now())\nON CONFLICT (session_id) DO UPDATE SET\n  user_id = EXCLUDED.user_id,\n  keys = EXCLUDED.keys,\n  context = EXCLUDED.context,\n  updated_at = now();`;\nreturn [{ json: { sql: q } }];"
      },
      "id": "Build_Memory_SQL",
      "name": "Build Memory UPSERT SQL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1240, 360]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$json.sql}}"
      },
      "id": "Postgres_Upsert",
      "name": "Postgres Memory Upsert",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1480, 360]
    },
    {
      "parameters": {
        "functionCode": "// Construct API response\nreturn [{ json: { status: 'accepted', primary_agent: $json.primary_agent, collaborators: $json.collaborators, queue: $json.queue, plan: $json.plan, metrics: { receivedAt: new Date().toISOString() } } }];"
      },
      "id": "Response",
      "name": "Build Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 160]
    }
  ],
  "connections": {
    "AI Agent (Tools)": {"main": [[{"node": "Validate Orchestration Plan", "type": "main", "index": 0}]]},
    "Webhook Master Orchestrate": {"main": [[{"node": "AI Agent (Tools)", "type": "main", "index": 0}]]},
    "Validate Orchestration Plan": {
      "main": [
        [{"node": "Publish → RabbitMQ", "type": "main", "index": 0}],
        [{"node": "Neo4j Context Write", "type": "main", "index": 0}],
        [{"node": "Build Response", "type": "main", "index": 0}],
        [{"node": "Build Memory UPSERT SQL", "type": "main", "index": 0}]
      ]
    },
    "Build Memory UPSERT SQL": {"main": [[{"node": "Postgres Memory Upsert", "type": "main", "index": 0}]]}
  },
  "settings": {"executionOrder": "v1"},
  "tags": ["orchestration", "ai", "master"],
  "versionId": "master-orchestration-agent-v1"
}
