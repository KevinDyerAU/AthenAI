route:
  receiver: 'null'
  group_by: ['alertname', 'job', 'instance']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 4h
  routes:
    # Critical alerts always page Slack critical channel
    - matchers:
        - severity = "critical"
      receiver: 'team-slack-critical'
      continue: true

    # Service/team routing by job label
    - matchers:
        - job =~ "^(rabbitmq|n8n)$"
      receiver: 'team-ops-slack'
      continue: true
    - matchers:
        - job =~ "^(neo4j|prometheus|loki|promtail|node-exporter)$"
      receiver: 'team-platform-slack'
      continue: true

    # Email for warning/critical as backup
    - matchers:
        - severity =~ "warning|critical"
      receiver: 'team-email'

receivers:
  - name: 'null'
  - name: 'team-slack-critical'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '${SLACK_CHANNEL_CRITICAL}'
        send_resolved: true
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        icon_emoji: ':rotating_light:'
        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
        http_config:
          follow_redirects: true
  - name: 'team-ops-slack'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '${SLACK_CHANNEL_OPS}'
        send_resolved: true
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        icon_emoji: ':pager:'
        color: '{{ if eq .Status "firing" }}warning{{ else }}good{{ end }}'
        http_config:
          follow_redirects: true
  - name: 'team-platform-slack'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '${SLACK_CHANNEL_PLATFORM}'
        send_resolved: true
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        icon_emoji: ':wrench:'
        color: '{{ if eq .Status "firing" }}#439FE0{{ else }}good{{ end }}'
        http_config:
          follow_redirects: true
  - name: 'team-email'
    email_configs:
      - to: '${ALERT_EMAIL_TO}'
        from: '${ALERT_EMAIL_FROM}'
        smarthost: '${SMTP_SMARTHOST}'
        auth_username: '${SMTP_USERNAME}'
        auth_password: '${SMTP_PASSWORD}'
        require_tls: true
        send_resolved: true

templates:
  - '/etc/alertmanager/templates/*.tmpl'

inhibit_rules:
  # If a critical alert is firing for same alertname/instance, suppress warnings
  - source_matchers: [ severity = "critical" ]
    target_matchers: [ severity = "warning" ]
    equal: [ 'alertname', 'instance' ]
